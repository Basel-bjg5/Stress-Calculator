function CalculateButtonValueChanged(app, event)
            % Store Inputs
            sigma_x = app.Sigma_x.Value;
            sigma_y = app.Sigma_y.Value;
            t_xy = app.Shear.Value;
            angle = app.Rot_Angle.Value;

            % Apply Equations

            angle = angle *pi/180; %from degree to Rad
            avg = (sigma_x + sigma_y)/2;
            diff_avg = (sigma_x - sigma_y)/2;
            sigma_x1 = avg + diff_avg*cos(2*angle) + t_xy*sin(2*angle);
            sigma_y1 = avg - diff_avg*cos(2*angle) - t_xy*sin(2*angle);
            t_x1y1 =  -1*diff_avg*sin(2*angle) + t_xy*cos(2*angle);
            theta_p1 = (1/2)*atan((2*t_xy)/(diff_avg*2));
            theta_p1 = 180*theta_p1/pi;%from Rad to degree
            theta_p2 = theta_p1 + 90;
            theta_s  = theta_p1 + 45;
            R = sqrt((diff_avg)^2 + (t_xy)^2);
            sigma_1 = avg + R;
            sigma_2 = avg - R;

            % Display Results
            app.Sigma_x1.Value  = sigma_x1;
            app.Sigma_y1.Value  = sigma_y1;
            app.Shear_1.Value   = t_x1y1;
            app.Sigma_1.Value   = sigma_1;
            app.Sigma_2.Value   = sigma_2;
            app.Theta_P1.Value  = theta_p1;
            app.Theta_P2.Value  = theta_p2;
            app.Max_Shear.Value = R;
            app.Theta_S.Value   = theta_s;

            % Figure
            theta = linspace(0, 2*pi, 100);
            x = R * cos(theta) + avg;
            y = R * sin(theta);
            set(app.UIAxes, 'YDir', 'reverse');

            % check specical figure Case
            if (sigma_x == sigma_y)
                X = sigma_x*ones(1,2);
                Y = linspace(-t_xy,t_xy,2);
            else
                X = linspace(sigma_x,sigma_y,2);
                Y = X*(t_xy/diff_avg) - (sigma_x * t_xy)/(diff_avg) + t_xy;
            end 
            diff_avg_2 = (sigma_x1 - sigma_y1)/2;
            if (sigma_x1 == sigma_y1)
                D1 = sigma_x1*ones(1,2);
                D2 = linspace(-t_x1y1,t_x1y1,2);
            else
                D1 = linspace(sigma_x1,sigma_y1,2);
                D2 = D1*(t_x1y1/diff_avg_2) - (sigma_x1 * t_x1y1)/(diff_avg_2) + t_x1y1;
            end 
            plot(x, y, 'b', 'Parent', app.UIAxes); % Mohr's circle
            hold(app.UIAxes, 'on');
            h2 = plot(X, Y, 'r', 'Parent', app.UIAxes); % Line
            h3 = plot(D1, D2, 'Color', [1, 0.5, 0], 'Parent', app.UIAxes); % Line
            legend(app.UIAxes , [h2,h3] , {'Perpendicular characteristic','Rotation characteristic'})
            hold(app.UIAxes, 'off'); 
        end
    end
